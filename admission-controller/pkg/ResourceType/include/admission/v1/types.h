/***********************************************************************
 * THIS FILE IS GENERATED BY TransformK8sAPI.py, PLEASE DONT MODIFY IT *
 ***********************************************************************/

#ifndef TYPES_H_C8BDBA4B
#define TYPES_H_C8BDBA4B

#include "Marshal.h"
#include "authentication/v1/types.h"
#include "goraw/types.h"
#include "meta/v1/types.h"
namespace apis { namespace admission { namespace v1 {
// PatchType constants.
extern const char * PatchTypeJSONPatch;
// Operation constants
extern const char * Create;
extern const char * Update;
extern const char * Delete;
extern const char * Connect;
// PatchType is the type of patch being used to represent the mutated object
typedef string PatchType;
// Operation is the type of resource operation being checked for admission control
typedef string Operation;
// AdmissionResponse describes an admission response.
struct AdmissionResponse {
    AdmissionResponse();
    static string getGroupVersion(bool group = true, bool version = true);
    static string getResName(bool lower = false, bool multi = false);
    void inspect(const string & name = "", unsigned level = 0) const;
    bool operator==(const AdmissionResponse & other) const;
    MARSHAL_JSON;
// UID is an identifier for the individual request/response.
// This must be copied over from the corresponding AdmissionRequest.
    apis::goraw::UID uid; // `json:"uid"`
// Allowed indicates whether or not the admission request was permitted.
    bool allowed; // `json:"allowed"`
// Result contains extra details into why an admission request was denied.
// This field IS NOT consulted in any way if "Allowed" is "true".
// +optional
    shared_ptr< apis::meta::v1::Status > status; // `json:"status,omitempty"`
// The patch body. Currently we only support "JSONPatch" which implements RFC 6902.
// +optional
    vector< char > patch; // `json:"patch,omitempty"`
// The type of Patch. Currently we only allow "JSONPatch".
// +optional
    shared_ptr< PatchType > patchType; // `json:"patchType,omitempty"`
// AuditAnnotations is an unstructured key value map set by remote admission controller (e.g. error=image-blacklisted).
// MutatingAdmissionWebhook and ValidatingAdmissionWebhook admission controller will prefix the keys with
// admission webhook name (e.g. imagepolicy.example.com/error=image-blacklisted). AuditAnnotations will be provided by
// the admission webhook to add additional context to the audit log for this request.
// +optional
    map< string , string > auditAnnotations; // `json:"auditAnnotations,omitempty"`
// warnings is a list of warning messages to return to the requesting API client.
// Warning messages describe a problem the client making the API request should correct or be aware of.
// Limit warnings to 120 characters if possible.
// Warnings over 256 characters and large numbers of warnings may be truncated.
// +optional
    vector< string > warnings; // `json:"warnings,omitempty"`
};
// AdmissionRequest describes the admission.Attributes for the admission request.
struct AdmissionRequest {
    AdmissionRequest();
    static string getGroupVersion(bool group = true, bool version = true);
    static string getResName(bool lower = false, bool multi = false);
    void inspect(const string & name = "", unsigned level = 0) const;
    bool operator==(const AdmissionRequest & other) const;
    MARSHAL_JSON;
// UID is an identifier for the individual request/response. It allows us to distinguish instances of requests which are
// otherwise identical (parallel requests, requests when earlier requests did not modify etc)
// The UID is meant to track the round trip (request/response) between the KAS and the WebHook, not the user request.
// It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
    apis::goraw::UID uid; // `json:"uid"`
// Kind is the fully-qualified type of object being submitted (for example, v1.Pod or autoscaling.v1.Scale)
    apis::meta::v1::GroupVersionKind kind; // `json:"kind"`
// Resource is the fully-qualified resource being requested (for example, v1.pods)
    apis::meta::v1::GroupVersionResource resource; // `json:"resource"`
// SubResource is the subresource being requested, if any (for example, "status" or "scale")
// +optional
    string subResource; // `json:"subResource,omitempty"`
// RequestKind is the fully-qualified type of the original API request (for example, v1.Pod or autoscaling.v1.Scale).
// If this is specified and differs from the value in "kind", an equivalent match and conversion was performed.
// 
// For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of
// `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]` and `matchPolicy: Equivalent`,
// an API request to apps/v1beta1 deployments would be converted and sent to the webhook
// with `kind: {group:"apps", version:"v1", kind:"Deployment"}` (matching the rule the webhook registered for),
// and `requestKind: {group:"apps", version:"v1beta1", kind:"Deployment"}` (indicating the kind of the original API request).
// 
// See documentation for the "matchPolicy" field in the webhook configuration type for more details.
// +optional
    shared_ptr< apis::meta::v1::GroupVersionKind > requestKind; // `json:"requestKind,omitempty"`
// RequestResource is the fully-qualified resource of the original API request (for example, v1.pods).
// If this is specified and differs from the value in "resource", an equivalent match and conversion was performed.
// 
// For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of
// `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]` and `matchPolicy: Equivalent`,
// an API request to apps/v1beta1 deployments would be converted and sent to the webhook
// with `resource: {group:"apps", version:"v1", resource:"deployments"}` (matching the resource the webhook registered for),
// and `requestResource: {group:"apps", version:"v1beta1", resource:"deployments"}` (indicating the resource of the original API request).
// 
// See documentation for the "matchPolicy" field in the webhook configuration type.
// +optional
    shared_ptr< apis::meta::v1::GroupVersionResource > requestResource; // `json:"requestResource,omitempty"`
// RequestSubResource is the name of the subresource of the original API request, if any (for example, "status" or "scale")
// If this is specified and differs from the value in "subResource", an equivalent match and conversion was performed.
// See documentation for the "matchPolicy" field in the webhook configuration type.
// +optional
    string requestSubResource; // `json:"requestSubResource,omitempty"`
// Name is the name of the object as presented in the request.  On a CREATE operation, the client may omit name and
// rely on the server to generate the name.  If that is the case, this field will contain an empty string.
// +optional
    string name; // `json:"name,omitempty"`
// Namespace is the namespace associated with the request (if any).
// +optional
    string ns; // `json:"namespace,omitempty"`
// Operation is the operation being performed. This may be different than the operation
// requested. e.g. a patch can result in either a CREATE or UPDATE Operation.
    Operation operation; // `json:"operation"`
// UserInfo is information about the requesting user
    apis::authentication::v1::UserInfo userInfo; // `json:"userInfo"`
// Object is the object from the incoming request.
// +optional
    apis::goraw::RawExtension object; // `json:"object,omitempty"`
// OldObject is the existing object. Only populated for DELETE and UPDATE requests.
// +optional
    apis::goraw::RawExtension oldObject; // `json:"oldObject,omitempty"`
// DryRun indicates that modifications will definitely not be persisted for this request.
// Defaults to false.
// +optional
    shared_ptr< bool > dryRun; // `json:"dryRun,omitempty"`
// Options is the operation option structure of the operation being performed.
// e.g. `meta.k8s.io/v1.DeleteOptions` or `meta.k8s.io/v1.CreateOptions`. This may be
// different than the options the caller provided. e.g. for a patch request the performed
// Operation might be a CREATE, in which case the Options will a
// `meta.k8s.io/v1.CreateOptions` even though the caller provided `meta.k8s.io/v1.PatchOptions`.
// +optional
    apis::goraw::RawExtension options; // `json:"options,omitempty"`
};
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// AdmissionReview describes an admission review request/response.
struct AdmissionReview : public apis::meta::v1::TypeMeta {
    AdmissionReview();
    static string getGroupVersion(bool group = true, bool version = true);
    static string getResName(bool lower = false, bool multi = false);
    void inspect(const string & name = "", unsigned level = 0) const;
    bool operator==(const AdmissionReview & other) const;
    MARSHAL_JSON;
// Request describes the attributes for the admission request.
// +optional
    shared_ptr< AdmissionRequest > request; // `json:"request,omitempty"`
// Response describes the attributes for the admission response.
// +optional
    shared_ptr< AdmissionResponse > response; // `json:"response,omitempty"`
};
}}}

#endif /* end of include guard: TYPES_H_C8BDBA4B */
